using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using System.ComponentModel;
using System.Diagnostics;
using System.ServiceProcess;
using System.Runtime.InteropServices;
using System.Windows.Forms;
using System.Drawing;
using System.IO;

namespace StartForm {
    public class Joke {
        private readonly Start parentForm;
        private readonly Random rand = new();
        private const int numberof = 1;

        //[DllImport("User32")]
        //private static extern int ShowWindow(int hwnd, int nCmdShow);

        public Joke(Start parent)
        {
            parentForm = parent;

            //Process.GetProcesses()
            //Process.GetProcesses().FirstOrDefault(p => p.ProcessName.Contains(NAME)
            //Process.GetProcessesByName(NAME)
        }

        public void Run()
        {
            Notify();
            //todo: timer controlling events
            //while ( true ) {
            for ( int i = 0; i < 10; i++ ) {
                switch ( rand.Next(numberof) ) {
                    case 0:
                        break;
                    case 1:
                        break;
                    default:
                        //MessageBox.Show("test");
                        break;
                }
            }
        }

        private void RotateScreen()
        {
            switch ( rand.Next(4) ) {
                case 0:
                    SendKeys.Send("^%{UP}");
                    break;
                case 1:
                    SendKeys.Send("^%{DOWN}");
                    break;
                case 2:
                    SendKeys.Send("^%{LEFT}");
                    break;
                case 3:
                    SendKeys.Send("^%{RIGHT}");
                    break;
            }
        }

        private void EditClipboard()
        {
            string text = rand.Next(4) switch {
                0 => "HI!",
                1 => "hopefully whatever was in here wasn't important",
                2 => "\0",
                3 => Clipboard.GetText(TextDataFormat.Rtf)
                              .Replace(" ", Environment.NewLine)
                              .Insert(0, Environment.NewLine)
                              .ToUpperInvariant()
                              .ToLowerInvariant()
                              .ToUpper(),
                _ => null
            };

            Clipboard.SetText(text);
        }

        private void KeyLock() // todo: fix - SendKey sends to app not OS
        {
            switch ( rand.Next(3) ) {
                case 0:
                    SendKeys.Send("{SCROLLLOCK}");
                    break;
                case 1:
                    SendKeys.Send("{NUMLOCK}");
                    break;
                case 2:
                    SendKeys.Send("{CAPSLOCK}");
                    break;
            }
        }

        private async void OpenCommand()
        {
            using var proc = Process.Start(new ProcessStartInfo { FileName = "cmd", RedirectStandardInput = true });

            using ( var stdin = proc.StandardInput ) {
                stdin.AutoFlush = true;

                stdin.WriteLine("dir");//todo: random commands (none, dir, [])

                await Task.Delay(1500);
                stdin.WriteLine("exit");
            }

            proc.WaitForExit();
        }

        private void ShowPopup()
        {
            string text = rand.Next(18) switch {
                0 => "Deleting System32",
                1 => "Windows has finished removing System32",
                2 => "Fatal error while opening FILE NAME HERE",
                3 => "System32 is corrupted or missing",
                4 => "Searching for backup file for System32",
                5 => "Allow task?",
                6 => "Unable to find backup files for System32",
                7 => "critical error",
                8 => "Reboot the computer?",
                9 => @"Failed to access data from C:\Windows\System32\",
                10 => "Fatal memory_data error, we advise to shut down Windows to prevent further damage",
                11 => "Contact Microsoft Windows support",
                12 => "Request has been sent to the support team",

                13 => "Error while opening computer",
                14 => "Unable to resolve error",
                15 => "Do you want to scan this computer?",
                16 => "Click me",
                _ => string.Empty
            };

            string caption = rand.Next(6) switch {
                0 => "Info",
                1 => "Error",
                2 => "critical error",
                3 => "Click me",
                > 3 => "",
                _ => null
            };

            MessageBox.Show(text, caption);
        }

        private void MoveCursor()
        {
            var rect = Screen.PrimaryScreen.Bounds;
            var pos = Cursor.Position;

            int minX = -pos.X / 2;
            int minY = -pos.Y / 2;
            int maxX = (rect.Width - pos.X) / 2;
            int maxY = (rect.Height - pos.Y) / 2;
            Cursor.Position = new Point(pos.X + rand.Next(minX, maxX), pos.Y + rand.Next(minY, maxY));
        }

        private void OpenEditor()
        {
            string filepath = Path.Combine(Path.GetTempPath(), "Untitled.txt");
            if ( !File.Exists(filepath) ) {
                File.Create(filepath).Dispose();
            }

            using var proc = Process.Start(new ProcessStartInfo { FileName = "explorer", Arguments = $"\"{filepath}\"" });

            proc.WaitForExit();
        }

        private void OpenExplorer()
        {
            using var proc = Process.Start(new ProcessStartInfo { FileName = "explorer" });
            proc.WaitForExit();
        }

        private void Notify()
        {
            var notify = parentForm.notifyIconJ;

            notify.BalloonTipIcon = (ToolTipIcon)rand.Next(4);

            switch ( rand.Next(10) ) {
                case 0:
                    notify.BalloonTipTitle = "HEY EVERY       !";
                    notify.BalloonTipText = $"IT'S ME, SPAMTON G. SPAMTON!{Environment.NewLine}EV3RY BUDDY  'S FAVORITE [[Number 1 Rated Salesman1997]]";
                    break;
                case 1:
                    notify.BalloonTipTitle = "YOU WANNA BE A [Big Shot]! EAHAHAHAHAA!!";
                    notify.BalloonTipText = "[[Hyperlink blocked.]]";
                    break;
                case 2:
                    notify.BalloonTipTitle = "LET'S MAKE A DEAL.";
                    notify.BalloonTipText = "YOU HAVE TOO MUCH MONEY";
                    break;
                case 3:
                    notify.BalloonTipTitle = "THIS IS [One Purchase] YOU WILL [Regret] FOR THE REST OF YOUR LIFE!";
                    notify.BalloonTipText = "DON'T WORRY! FOR OUR [No Money Back Guaranttee]";
                    break;
                case 4:
                    notify.BalloonTipTitle = "LOOKING FOR [Irresistible Deals] THAT WILL [Blow Your Mind!?]";
                    notify.BalloonTipText = "WELL [Shut Your Mouth] BECAUSE YOU ARE [A Weakling!]";
                    break;
                case 5:
                    notify.BalloonTipTitle = "TAKE THIS DEAL AND YOU WILL [[Die]]!! IT'S THAT GOOD!!!";
                    notify.BalloonTipText = "HURRY UP AND BUY!";
                    break;
                case 6:
                    notify.BalloonTipTitle = "WAIT LOOK!! HEAR THOSE [Balloons]??? YOU ARE [1000th Customer]!!.";
                    notify.BalloonTipText = "DON'T WORRY KIDS I'M AN [HonestMan] I JUST NEED YOUR [Account Details] AND THE [Number on theB4ck]!"
                                            + Environment.NewLine + "THEN YOU CAN ENJ0Y EVERY [Big], EVERY [Shot], EVERY [Hyperlink Blocked], ALL YOURS";
                    break;
                case 7:
                    notify.BalloonTipTitle = "YOU [Little Sponge]! I KNEW YOU'D COME HERE [[On A Saturday Night]]!";
                    notify.BalloonTipText = "DON'T FORGET TO [Like and Subscribe] FOR MORE [Hyperlink Blocked]!";
                    break;
                case 8:
                    notify.BalloonTipTitle = "MY [[Hyperlink Blocked]].";
                    notify.BalloonTipText = "[[Designed BY The Classics You've Come To Expect! (C)1997]]";
                    break;
                case 9:
                    notify.BalloonTipTitle = "LOOKS LIKE YOU'RE [[All Alone On A Late Night?]]";
                    notify.BalloonTipText = $"WHY BE THE [[Little Sponge]] WHO HATES ITS [[$4.99]] LIFE{Environment.NewLine}WHEN YOU CAN BE A [[BIG SHOT!!!]]";
                    break;
                default:
                    notify.BalloonTipTitle = null;
                    notify.BalloonTipText = null;
                    break;
            }

            notify.ShowBalloonTip(1000);
        }
    }
}
